#!/bin/bash

# zobot_ai - Advanced container management for robotics development

GREEN='\033[0;32m'
CYAN='\033[0;36m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
WORKSPACE_ROOT="$(dirname "$SCRIPT_DIR")"

# Container config
CONTAINER_NAME="zobot-ai"
DOCKERFILE_PATH="$WORKSPACE_ROOT/.devcontainer/Dockerfile.ai"
IMAGE_NAME="zobot-ai"

# Default config
ROS_DISTRO="jazzy"
CONDA_ENV=""
MOUNT_VOLUME=""
BUILD_ONLY=false
PRUNE_CONTAINER=false

# Show help
show_help() {
    echo -e "${CYAN}ðŸ¤– ZoBot AI - Robotics Development Container${NC}"
    echo ""
    echo -e "${GREEN}Usage:${NC}"
    echo "  zobot_ai [OPTIONS]"
    echo ""
    echo -e "${GREEN}Options:${NC}"
    echo "  --humble              Use ROS Humble (default)"
    echo "  --jazzy               Use ROS Jazzy"
    echo "  --conda <env_name>    Activate conda environment on start"
    echo "  --volume <path>       Mount host path to /home/zozo/mount"
    echo "  --build               Build container only, don't run"
    echo "  --prune               Stop and remove container"
    echo "  --help, -h            Show this help message"
    echo ""
    echo -e "${GREEN}Examples:${NC}"
    echo "  zobot_ai                           # Start container with ROS Humble"
    echo "  zobot_ai --jazzy                   # Start container with ROS Jazzy"
    echo "  zobot_ai --conda robotics          # Start with 'robotics' conda env"
    echo "  zobot_ai --volume /path/to/volume  # Mount external volume"
    echo "  zobot_ai --build                   # Build container only"
    echo "  zobot_ai --prune                   # Remove container"
}

build_container() {
    local distro=$1
    local image_tag="${IMAGE_NAME}-${distro}"
    
    echo -e "${YELLOW}Building ${image_tag} container...${NC}"
    
    local base_image
    if [ "$distro" = "jazzy" ]; then
        base_image="rwthika/ros2-ml:jazzy"
    else
        base_image="rwthika/ros2-ml:humble"
    fi
    
    docker build \
        -f "$DOCKERFILE_PATH" \
        -t "$image_tag" \
        --build-arg ROS_DISTRO="$distro" \
        --build-arg BASE_IMAGE="$base_image" \
        --target overlay-builder \
        "$WORKSPACE_ROOT"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Container built successfully!${NC}"
    else
        echo -e "${RED}Container build failed!${NC}"
        exit 1
    fi
}

image_exists() {
    local image_tag="${IMAGE_NAME}-${1}"
    docker image inspect "$image_tag" &> /dev/null
}

container_running() {
    local container_name="${CONTAINER_NAME}-${1}"
    docker ps --format '{{.Names}}' | grep -q "^${container_name}$"
}

container_exists() {
    local container_name="${CONTAINER_NAME}-${1}"
    docker ps -a --format '{{.Names}}' | grep -q "^${container_name}$"
}

start_container() {
    local distro=$1
    local conda_env=$2
    local mount_vol=$3
    
    local image_tag="${IMAGE_NAME}-${distro}"
    local container_name="${CONTAINER_NAME}-${distro}"
    
    if ! image_exists "$distro"; then
        echo -e "${YELLOW}Image not found. Building...${NC}"
        build_container "$distro"
    fi
    
    local mount_args=""
    if [ -n "$mount_vol" ]; then
        if [ ! -d "$mount_vol" ]; then
            echo -e "${RED}Mount path does not exist: $mount_vol${NC}"
            exit 1
        fi
        mount_args="-v $mount_vol:/home/zozo/zobot_ws/mount"
    fi
    
    local ros_domain_id=${ROS_DOMAIN_ID:-0}

    # Create XDG_RUNTIME_DIR on host
    local xdg_runtime_dir="/tmp/runtime-$(id -u)"
    mkdir -p "$xdg_runtime_dir"
    chmod 700 "$xdg_runtime_dir"
    
    if container_running "$distro"; then
        echo -e "${GREEN}Entering running container...${NC}"
        if [ -n "$conda_env" ]; then
            docker exec -it "$container_name" bash -c "source ~/.bashrc && source /home/zozo/.anaconda/etc/profile.d/conda.sh && conda activate $conda_env && exec bash"
        else
            docker exec -it "$container_name" bash -c "source ~/.bashrc && echo '127.0.0.1 zobot-$ROS_DISTRO' | sudo tee -a /etc/hosts && exec bash"
        fi
    elif container_exists "$distro"; then
        echo -e "${YELLOW}Starting existing container...${NC}"
        docker rm "$container_name" &> /dev/null
        echo -e "${GREEN}Creating new persistent container...${NC}"
        docker run -d \
            --name "$container_name" \
            --hostname "zobot-${distro}" \
            --network host \
            --gpus all \
            --runtime nvidia \
            --privileged \
            --env DISPLAY="$DISPLAY" \
            --env ROS_DOMAIN_ID="$ros_domain_id" \
            --env NVIDIA_VISIBLE_DEVICES=all \
            --env NVIDIA_DRIVER_CAPABILITIES=all \
            --env QT_X11_NO_MITSHM=1 \
            --volume /tmp/.X11-unix:/tmp/.X11-unix:rw \
            --volume "$xdg_runtime_dir:/tmp/runtime-zozo:rw" \
            --volume "$HOME/.ssh:/home/zozo/.ssh:ro" \
            --volume "/mnt/cave:/home/zozo/cave:rw" \
            --volume "$WORKSPACE_ROOT:/home/zozo/zobot_ws:rw" \
            --volume "/mnt/cave/.conda:/home/zozo/.conda:rw" \
            --device /dev/dri:/dev/dri \
            $mount_args \
            "$image_tag" \
            tail -f /dev/null
        
        echo -e "${GREEN}Container started in background. Entering container...${NC}"
        sleep 2  
        if [ -n "$conda_env" ]; then
            docker exec -it "$container_name" bash -c "source ~/.bashrc && source /home/zozo/.anaconda/etc/profile.d/conda.sh && conda activate $conda_env && exec bash"
        else
            docker exec -it "$container_name" bash -c "source ~/.bashrc && echo '127.0.0.1 zobot-$ROS_DISTRO' | sudo tee -a /etc/hosts && exec bash"
        fi
    else
        echo -e "${GREEN}Starting new container...${NC}"
        docker run -d \
            --name "$container_name" \
            --hostname "zobot-${distro}" \
            --network host \
            --gpus all \
            --runtime nvidia \
            --privileged \
            --env DISPLAY="$DISPLAY" \
            --volume "$xdg_runtime_dir:/tmp/runtime-zozo:rw" \
            --env ROS_DOMAIN_ID="$ros_domain_id" \
            --env NVIDIA_VISIBLE_DEVICES=all \
            --env NVIDIA_DRIVER_CAPABILITIES=all \
            --env QT_X11_NO_MITSHM=1 \
            --volume /tmp/.X11-unix:/tmp/.X11-unix:rw \
            --volume "$HOME/.ssh:/home/zozo/.ssh:ro" \
            --volume "/mnt/cave:/home/zozo/cave:rw" \
            --volume "$WORKSPACE_ROOT:/home/zozo/zobot_ws:rw" \
            --volume "/mnt/cave/.conda:/home/zozo/.conda:rw" \
            --device /dev/dri:/dev/dri \
            $mount_args \
            "$image_tag" \
            tail -f /dev/null
        
        echo -e "${GREEN}Container started in background. Entering container...${NC}"
        sleep 2  
        if [ -n "$conda_env" ]; then
            docker exec -it "$container_name" bash -c "source ~/.bashrc && source /home/zozo/.anaconda/etc/profile.d/conda.sh && conda activate $conda_env && exec bash"
        else
            docker exec -it "$container_name" bash -c "source ~/.bashrc && echo '127.0.0.1 zobot-$ROS_DISTRO' | sudo tee -a /etc/hosts && exec bash"
        fi
    fi
}

prune_container() {
    local distro=$1
    local container_name="${CONTAINER_NAME}-${distro}"
    local image_tag="${IMAGE_NAME}-${distro}"
    
    echo -e "${RED}Pruning container for $distro...${NC}"
    
    if container_exists "$distro"; then
        docker stop "$container_name" &> /dev/null
        docker rm "$container_name" &> /dev/null
        echo -e "${GREEN}Container removed${NC}"
    fi
    
    # Remove image
    if image_exists "$distro"; then
        docker rmi "$image_tag" &> /dev/null
        echo -e "${GREEN}Image removed${NC}"
    fi
    
    echo -e "${GREEN}Pruning complete for $distro${NC}"
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --humble)
            ROS_DISTRO="humble"
            shift
            ;;
        --jazzy)
            ROS_DISTRO="jazzy"
            shift
            ;;
        --conda)
            CONDA_ENV="$2"
            shift 2
            ;;
        --volume)
            MOUNT_VOLUME="$2"
            shift 2
            ;;
        --build)
            BUILD_ONLY=true
            shift
            ;;
        --prune)
            PRUNE_CONTAINER=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

if [ "$PRUNE_CONTAINER" = true ]; then
    prune_container "$ROS_DISTRO"
elif [ "$BUILD_ONLY" = true ]; then
    build_container "$ROS_DISTRO"
else
    start_container "$ROS_DISTRO" "$CONDA_ENV" "$MOUNT_VOLUME"
fi
