#!/bin/bash

# ROS Repository Management Script

# Color definitions
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

WORKSPACE_DIR="/home/zozo/zobot_ws"
REQUIREMENTS_DIR="/home/zozo/zobot_ws/.requirements"
DEPEND_REPOS_FILE="$REQUIREMENTS_DIR/depend.repos"
ROS_OVERLAY_DIR="/opt/ros/ros_ws"

vcs_import() {
    echo -e "${CYAN}Importing VCS repositories...${NC}"
    
    if [ ! -f "$DEPEND_REPOS_FILE" ]; then
        echo -e "${RED}depend.repos file not found: $DEPEND_REPOS_FILE${NC}"
        exit 1
    fi
    
    if [ ! -s "$DEPEND_REPOS_FILE" ] || [ "$(grep -c '^\s*[^#]' "$DEPEND_REPOS_FILE")" -le 1 ]; then
        echo -e "${YELLOW}depend.repos is empty or contains only comments${NC}"
        return 0
    fi
    
    sudo mkdir -p "$ROS_OVERLAY_DIR"
    sudo chown -R $USER:$USER "$ROS_OVERLAY_DIR"
    sudo chmod -R 755 "$ROS_OVERLAY_DIR"
    
    cd "$ROS_OVERLAY_DIR" || exit 1
    
    if vcs import . < "$DEPEND_REPOS_FILE"; then
        echo -e "${GREEN}VCS repositories imported successfully to $ROS_OVERLAY_DIR${NC}"
        return 0
    else
        echo -e "${RED}Failed to import VCS repositories${NC}"
        return 1
    fi
}

vcs_status() {
    echo -e "${CYAN}Checking VCS repository status...${NC}"
    
    cd "$WORKSPACE_DIR" || exit 1
    
    if [ ! -d ".src" ]; then
        echo -e "${YELLOW}No .src directory found${NC}"
        return 0
    fi
    
    vcs status .src
}

vcs_pull() {
    echo -e "${CYAN}Pulling latest changes from VCS repositories...${NC}"
    
    cd "$WORKSPACE_DIR" || exit 1
    
    if [ ! -d ".src" ]; then
        echo -e "${YELLOW}No .src directory found${NC}"
        return 0
    fi
    
    vcs pull .src
}

vcs_build() {
    echo -e "${CYAN}ðŸ”¨ Building VCS repositories...${NC}"
    
    if [ ! -d "$ROS_OVERLAY_DIR" ]; then
        echo -e "${YELLOW}No ROS overlay directory found at $ROS_OVERLAY_DIR${NC}"
        return 0
    fi
    
    if [ "$(find "$ROS_OVERLAY_DIR" -name "*.xml" -o -name "CMakeLists.txt" -o -name "setup.py" | wc -l)" -eq 0 ]; then
        echo -e "${YELLOW}No buildable packages found in $ROS_OVERLAY_DIR${NC}"
        return 0
    fi
    
    cd "$WORKSPACE_DIR" || exit 1
    
    if cr bf "$ROS_OVERLAY_DIR"; then
        echo -e "${GREEN}Repositories built successfully${NC}"
        echo -e "${CYAN}Don't forget to source the setup file: source ~/.ros_builds/install/setup.bash${NC}"
        return 0
    else
        echo -e "${RED}Failed to build some repositories${NC}"
        return 1
    fi
}

vcs_clean() {
    echo -e "${CYAN}Cleaning VCS repositories...${NC}"
    
    if [ -d "$ROS_OVERLAY_DIR" ]; then
        echo -e "${YELLOW}This will remove all VCS repositories in $ROS_OVERLAY_DIR. Continue? (y/N)${NC}"
        read -r response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            sudo rm -rf "$ROS_OVERLAY_DIR"
            echo -e "${GREEN}VCS repositories cleaned${NC}"
        fi
    else
        echo -e "${YELLOW}â„¹No ROS overlay directory found${NC}"
    fi
    
    cd "$WORKSPACE_DIR" || exit 1
    
    if [ -d "build" ]; then
        echo -e "${YELLOW}Also remove build directory? (y/N)${NC}"
        read -r response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            rm -rf build/
            echo -e "${GREEN}Build directory cleaned${NC}"
        fi
    fi
    
    if [ -d "install" ]; then
        echo -e "${YELLOW}Also remove install directory? (y/N)${NC}"
        read -r response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
            rm -rf install/
            echo -e "${GREEN}Install directory cleaned${NC}"
        fi
    fi
}

rosdep_install() {
    echo -e "${CYAN}Installing ROS dependencies...${NC}"
    
    echo -e "${YELLOW}Updating rosdep database...${NC}"
    if sudo rosdep update; then
        echo -e "${GREEN}Rosdep database updated${NC}"
    else
        echo -e "${RED}Failed to update rosdep database${NC}"
        return 1
    fi
    
    if [ -d "$ROS_OVERLAY_DIR" ]; then
        echo -e "${YELLOW}Installing dependencies for $ROS_OVERLAY_DIR...${NC}"
        if rosdep install --from-paths "$ROS_OVERLAY_DIR" --ignore-src -r -y; then
            echo -e "${GREEN}Dependencies installed for ROS overlay workspace${NC}"
        else
            echo -e "${YELLOW}Some dependencies might not be available for ROS overlay workspace${NC}"
        fi
    else
        echo -e "${YELLOW}No ROS overlay directory found at $ROS_OVERLAY_DIR${NC}"
    fi
    
    ROS_MAIN_DIR="$WORKSPACE_DIR/ros"
    if [ -d "$ROS_MAIN_DIR" ]; then
        echo -e "${YELLOW}Installing dependencies for $ROS_MAIN_DIR...${NC}"
        if rosdep install --from-paths "$ROS_MAIN_DIR" --ignore-src -r -y; then
            echo -e "${GREEN}Dependencies installed for main workspace${NC}"
        fi
    else
        echo -e "${YELLOW}No main ROS directory found at $ROS_MAIN_DIR${NC}"
    fi
    
    echo -e "${GREEN}ROS dependency installation complete${NC}"
}

show_help() {
    echo -e "${CYAN}ROS Repository Manager${NC}"
    echo ""
    echo -e "${GREEN}Usage:${NC}"
    echo "  ros-mgr import     Import repositories from depend.repos"
    echo "  ros-mgr status     Show status of VCS repositories"
    echo "  ros-mgr pull       Pull latest changes from repositories"
    echo "  ros-mgr build      Build imported repositories"
    echo "  ros-mgr install    Update rosdep and install dependencies"
    echo "  ros-mgr clean      Clean VCS repositories and build artifacts"
    echo "  ros-mgr help       Show this help message"
    echo ""
    echo -e "${GREEN}Description:${NC}"
    echo "  This script manages VCS repositories defined in:"
    echo "  $DEPEND_REPOS_FILE"
    echo "  Repositories are imported to: $ROS_OVERLAY_DIR"
    echo ""
    echo -e "${GREEN}Workflow:${NC}"
    echo "  1. Edit depend.repos with your repository definitions"
    echo "  2. Run 'ros-mgr import' to clone repositories"
    echo "  3. Run 'ros-mgr install' to install dependencies"
    echo "  4. Run 'ros-mgr build' to build the imported packages"
    echo "  5. Source the setup file: 'source ~/.ros_builds/install/setup.bash'"
}

case "${1:-help}" in
    import)
        vcs_import
        ;;
    status)
        vcs_status
        ;;
    pull)
        vcs_pull
        ;;
    build)
        vcs_build
        ;;
    install)
        rosdep_install
        ;;
    clean)
        vcs_clean
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        show_help
        exit 1
        ;;
esac
